// ── 解析 Slide ──
        // 定義單一 slide 正則：起始數字、slide 類型（支援多字元 pp、qq 或單一符號）、目標位置，後面以 [參數] 表示
        const slideRegex = /^(\d)((?:pp)|(?:qq)|[-<>^vpqszVw])(\d)\[([^\]]+)\]/;
        const chainIndicator = "*";
        if (data.pos.includes(chainIndicator) && data.pos.includes("[")) {
            // 鏈式 slide 範例： 1-2[4:1]*<3[4:1]*>4[4:1]
            let parts = data.pos.split(chainIndicator);
            let mainMatch = parts[0].match(slideRegex);
            if (mainMatch) {
                let startPos = mainMatch[1],
                    slideType = mainMatch[2],
                    firstConnect = mainMatch[3],
                    paramStr = mainMatch[4];
                let result = parseParameter(paramStr, data.bpm);
                let chainSegments = [];
                chainSegments.push({
                    type: slideType,
                    connect: String(firstConnect),
                    slideTime: result.time,
                    ...(result.delay !== undefined ? { slideDelay: result.delay } : {}),
                    ...(result.bpmOverride !== undefined ? { slideBpm: result.bpmOverride } : {})
                });
                // 後續每段格式： ?{slideType}{目標}[參數]
                for (let j = 1; j < parts.length; j++) {
                    let segMatch = parts[j].match(/^((?:pp)|(?:qq)|[-<>^vpqszVw])(\d)\[([^\]]+)\]/);
                    if (segMatch) {
                        let segType = segMatch[1],
                            segConnect = segMatch[2],
                            segParam = segMatch[3];
                        let resultSeg = parseParameter(segParam, data.bpm);
                        chainSegments.push({
                            type: segType,
                            connect: String(segConnect),
                            slideTime: resultSeg.time,
                            ...(resultSeg.delay !== undefined ? { slideDelay: resultSeg.delay } : {}),
                            ...(resultSeg.bpmOverride !== undefined ? { slideBpm: resultSeg.bpmOverride } : {})
                        });
                    }
                }
                tempNote[i] = {
                    pos: String(startPos),
                    time: data.time,
                    slide: true,
                    chain: chainSegments
                };
            }
        } else if (data.pos.includes("[") && data.pos.match(slideRegex)) {
            // 單一 slide 範例： 1-2[4:1] 或 1-2[##2]
            let slideMatch = data.pos.match(slideRegex);
            if (slideMatch) {
                const startPos = slideMatch[1],
                    slideType = slideMatch[2],
                    endPos = slideMatch[3],
                    paramStr = slideMatch[4];
                let result = parseParameter(paramStr, data.bpm);
                tempNote[i] = {
                    pos: String(startPos),
                    time: data.time,
                    slide: true,
                    type: slideType,
                    connect: String(endPos),
                    slideTime: result.time,
                    ...(result.delay !== undefined ? { slideDelay: result.delay } : {}),
                    ...(result.bpmOverride !== undefined ? { slideBpm: result.bpmOverride } : {})
                };
            }
        }

        // ── 解析 Touch ──
        // Touch 格式：A1~8、B1~8、C、D1~8、E1~8，若有參數則用 h[參數] 表示
        // 例：A3h[4:1] → 起始位置 3，touch 類型 A，touchTime 依 [參數] 計算
        const touchMatch = data.pos.match(/^([ABCDE])([1-8])?(?:h\[(.+)\])?/);
        if (touchMatch) {
            let letter = touchMatch[1],
                digit = touchMatch[2] || ""; // 若無數字，例如 C，則預設後續處理
            // 當有參數括號時，解析參數；若無則 touchTime 預設為 0
            if (touchMatch[3]) {
                let paramStr = touchMatch[3];
                let result = parseParameter(paramStr, data.bpm);
                tempNote[i] = {
                    pos: digit || "1",
                    time: data.time,
                    touch: letter,
                    touchTime: result.time
                };
            } else {
                // 無參數情況下，僅標記 touch，並以數字或預設 "1" 當作 pos
                tempNote[i] = {
                    pos: digit || "1",
                    time: data.time,
                    touch: letter
                };
            }
        }


        // ── 處理星型連線 ──
        // 格式範例： 123-456[4:1] 中的 star 可透過特殊符號解析（此處維持原邏輯）
        const starMatch = data.pos.match(/(\d+)([-^v<>VqQpPszw]+)(\d+)\[(\d+):(\d+)\]/);
        if (starMatch) {
            const [, startPos, symbol, endPos, x, y] = starMatch;
            const ratio = isFinite(y / x) ? y / x : 0;
            const starTime = ratio * (60 / data.bpm) * 4;
            tempNote[i].pos = startPos;
            tempNote[i].star = true;
            tempNote.splice(i + 1, 0, {
                pos: startPos,
                time: data.time,
                starTime,
                type: symbol,
                connect: endPos,
            });
            i++;
        }

        delete tempNote[i].bpm;